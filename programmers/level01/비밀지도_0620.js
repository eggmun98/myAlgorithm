// 문제 설명
// 비밀지도
// 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다. 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.
// 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
// 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 "지도 1"과 "지도 2"라고 하자. 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
// "지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
// 암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.
// secret map
// 네오가 프로도의 비상금을 손에 넣을 수 있도록, 비밀지도의 암호를 해독하는 작업을 도와줄 프로그램을 작성하라.

// 내 풀이
function solution(n, arr1, arr2) {
  const answer = [];

  for (let i = 0; i < n; i++) {
    arr1[i] = arr1[i].toString(2).padStart(n, "0");
    arr2[i] = arr2[i].toString(2).padStart(n, "0");
    answer[i] = "";
    for (let j = 0; j < n; j++) {
      if (arr1[i][j] === "1" || arr2[i][j] === "1") {
        answer[i] += "#";
      } else {
        answer[i] += " ";
      }
    }
  }

  return answer;
}

// 회고
// 변수를 선언하고 값을 할당하지 않으면 undefined라는 값이 나온다.
// 나는 그걸 잊고 있어서 이 문제를 푸는데 오래 걸렸다.
// 먼저 const answer =[]를 선언해 준다.
// 그리고 이중 반복문을 돌릴거다.
// 첫번째 반복문에는 arr1와 arr2를 이진법으로 바꾸었다.
// 그리고 이 문제를 쉽게 풀기 위해 이진법의 자릿수를 맞쳐주었다.
// 그러기 위해 padStart() 메서드를 이용하였다.
// 자릿수는 n번째 까지이고 자릿수가 부족하면 왼쪽부터 0을 채우게 했다.
// 그리고 answer[i] = ""로 초기화를 해주었다.
// 이렇게 한 이유는 answer를 선언하고 값을 넣어주지 않았기 때문이다.
// 즉 값을 할당하지 않으면 undefined가 들어있기 때문이다.
// undefined를 방지하기 위해 ""을 할당해 주었다.
// 두번째 반복문에서는 한 칸만 1이 있으면 #이기에 조건식을 달아주었다.
// 그리고 if문을 이용하여 answer[i] 배열에 값을 넣어주었다.
// 마지막으로 리턴을 해주었다.
// 나는 이번 문제를 풀고 cs 지식의 중요성을 알게 되었다.
// 진짜 cs 지식이 없다면 이 문제를 풀지도 못했을거다.
