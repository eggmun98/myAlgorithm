// 1. 문제와 이해
// 설명: 로마 숫자 문자열 s를 입력받아 정수로 변환한다.
// 입력: 문자열 s (1 ≤ s.length ≤ 15)
// 출력: 정수 (1 ≤ 값 ≤ 3999)
// 조건:
//   - 로마 숫자는 아래와 같이 구성됨:
//       I=1, V=5, X=10, L=50, C=100, D=500, M=1000
//   - 보통 큰 수에서 작은 수 순서로 쓰지만,
//     예외적으로 작은 수가 앞에 오면 뺄셈으로 해석:
//       IV=4, IX=9, XL=40, XC=90, CD=400, CM=900
// 유형: 문자열 처리 / 해시맵 매핑 / 그리디

// 2. 계획
// - 각 로마 문자에 해당하는 값을 매핑한다.
// - 문자열을 왼쪽에서 오른쪽으로 순회하면서,
//   현재 값이 다음 값보다 작으면 "뺄셈 규칙" 적용 (ex. I before V → -1)
//   아니면 그냥 더함.
// - 한 번만 순회하면 O(n)에 해결 가능.
// - 공간복잡도 O(1) (상수 맵)

// 3. 풀이
/**
 * @param {string} s
 * @return {number}
 */
var romanToInt = function(s) {
    const map = {
        I: 1,
        V: 5,
        X: 10,
        L: 50,
        C: 100,
        D: 500,
        M: 1000
    }
    
    let result = 0;

    for(let i = 0; i<s.length; i++) {
        let curr = map[s[i]] 
        let next = map[s[i + 1]]

       if (next > curr) {
      result -= curr;  // 뺄셈 규칙
      // 원래 로마 숫자는 IV는 -1 + 5 = 4이다. 즉 앞에 숫자는 빼야 하기 때문에 다음 숫자보다 작다면은 뺴야 한다.
    } else {
      result += curr;  // 일반 규칙
    }


    }

    return result

    
};