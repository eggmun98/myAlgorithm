// 1. 문제와 이해
// 간단하게 n의 약수를 구해서 합을 구해야 합니다.
// 약수는 n의 제곱근까지만 구하면 효율적으로 구할 수 있습니다.

// 2. 계획
// 반복문을 이용하여 i가 n/2랑 같아질 때까지 반복해야 합니다.
// 두 번째 풀이는 n의 갯수 만큼 배열의 요소를 만들어야 합니다.
// 그리고 reduce를 이용하여 num라는 변수를 만듭니다.
// num 변수는 배열의 요소값 + 인덱스 값을 더합니다.
// 그러면 1, 2, 3, 4, 5, 6, 이렇게 순차적으로 1씩 증가하게 됩니다.
// 그리고 return 문을 통해서 (n % num) 이 0이라면
// num과 누적값을 더합니다.
// 그게 아니라면 누적값과 0을 더합니다.

// 3. 풀이 1
function solution(n) {
  let answer = n;
  for (let i = 1; i <= n / 2; i++) {
    if (n % i === 0) {
      answer += i;
    }
  }
  return answer;
}

// 4. 풀이 2
function solution(n) {
  return new Array(n).fill(1).reduce((acc, cur, i) => {
    const num = cur + i;
    return acc + (n % num === 0 ? num : 0);
  }, 0);
}

// 회고
// 약수의 합을 구하는 문제는 쉬운 문제입니다.
// 쉬운 문제이지만 효율적인 방법으로 구하는데 수학적 상식이 필요했었습니다.
// n의 제곱근까지만 반복문을 돌리면 효율적인 방법이라는 것을 알게 되었습니다.
// 또 reduce 메소드를 이용하여 약수의 합을 구하는 방법을 알게 되었습니다.
// 앞으로 다른 방법으로도 풀수 있도록 공부해야겠습니다.
