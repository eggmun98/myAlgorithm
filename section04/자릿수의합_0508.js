// N개의 자연수가 입력되면 각 자연수의 자릿수의 합을 구하고, 그 합이 최대인 자연수를 출력 하는 프로그램을 작성하세요. 자릿수의 합이 같은 경우 원래 숫자가 큰 숫자를 답으로 합니다. 만약 235 와 1234가 동시에 답이 될 수 있다면 1234를 답으로 출력해야 합니다.
// ▣ 입력설명
// 첫 줄에 자연수의 개수 N(3<=N<=100)이 주어지고, 그 다음 줄에 N개의 자연수가 주어진다. 각 자연수의 크기는 10,000,000를 넘지 않는다.
// ▣ 출력설명
// 자릿수의 합이 최대인 자연수를 출력한다.
// ▣ 입력예제 1
// 7
// 128 460 603 40 521 137 123
// ▣ 출력예제 1 137

// 내 풀이
const myFn = (num) => {
  let answer = [0, ""]; // 0: 각 자리의 합, 원본 문자열 숫자 // 반환 변수
  let check = [0, ""]; // 0: 각 자리의 합, 원본 문자열 숫자 // 반환 변수와 비교하는 변수

  for (let i = 0; i < num.length; i++) {
    num[i] = String(num[i]); // 숫자의 자릿수를 알기위해 문자열로 변환

    if (answer[0] < check[0]) {
      answer[0] = check[0]; // 반환 변수에 제일 큰값 저장
      answer[1] = check[1]; // 반환 변수에 제일 큰값 저장
    } else if (answer[0] === check[0]) {
      // 만약에 각 자리의 합이 둘다 크다면
      if (Number(answer[1]) < Number(check[1])) {
        // 그 중에서 원본 문자열 숫자가 큰 값만 최종 저장
        answer[1] = check[1];
      }
    }

    check[0] = 0; // 초기화
    check[1] = ""; // 초기화

    for (let j = 0; j < num[i].length; j++) {
      check[0] += Number(num[i][j]); // 각 자리의 합 계산
      check[1] = num[i]; // 원본 문자열 숫자 저장
    }
  }
  return answer[1];
};

myFn([128, 460, 603, 40, 521, 137, 123]);

// 다른 사람 풀이
function solution(arr) {
  let answer,
    max = Number.MIN_SAFE_INTEGER;
  for (let x of arr) {
    let sum = 0,
      tmp = x;
    while (tmp) {
      sum += tmp % 10;
      tmp = Math.floor(tmp / 10);
    }
    if (sum > max) {
      max = sum;
      answer = x;
    } else if (sum === max) {
      if (x > answer) answer = x;
    }
  }
  return answer;
}

// 회고
// 이번 문제는 변수 초기화 위치를 잘못 적어서 조금 막혔다.
// 내 머리속으로는 답이 나와야 할텐데 안나오는 원인을 찾아보니까 변수 초기화 위치 문제였다.
// 그리고 너무 어렵게 푼거 같아서 좀더 효율적으로 풀수 있게 연구를 해야겠다.
// 그리고 다른 사람 풀이를 해석하자면
// 배열의 값을 % 10으로 나누어 일의 자리 숫자를 뽑아내는 거다.
// 즉 계속 일의 자리를 뽑아내서 그 값을 합치는 방식이다.
// 이방식이 훨씬 이해하기 쉽고 효율적인거 같다.
// 앞으로 이런 비슷한 문제를 풀게 된다면 일의 자리를 뽑아내는 방식으로 풀어봐야 겠다.
