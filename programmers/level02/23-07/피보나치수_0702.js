// 1. 문제와 이해
// 0과 1부터 시작을 하여 전에 있던 값들을 더해 n까지 계산을 해야 합니다.
// 또 기존의 값을 이용하여 효율적인 코드를 작성해야 합니다.

// 2. 계획
// a 변수는 0을 할당을 하고 b 변수는 1을 할당합니다.
// 처음 반복문을 이용하여 sum 변수에 a 변수와 b 변수 값을 더합니다.
// 그리고 a 변수는 b의 값으로 초기화합니다.
// b 변수는 sum 변수의 값으로 초기화합니다.
// 그리고 n까지 계산을 한 후 sum을 반환합니다.

// 3. 실패한 풀이
function solution(n) {
  let sum = (a = 0);
  let b = 1;
  for (let i = 2; i <= n; i++) {
    sum = a + b;
    a = b;
    b = sum;
  }
  return sum % 1234567;
}
// 처음 작성한 코드 입니다.
// return문에 1234567을 나누어 주었기 때문에 n이 1500일 경우 NaN이 출력 되었습니다.
// NaN 값이 출력한 이유는 자바스크립트는 -2^53 ~ 2^53까지 정확한 계산이 가능하기 때문입니다.
// 그래서 처음부터 반복문에 계산을 할 때 1234567을 나누어 줘야 합니다.
// 이 생각을 하는데 시간이 오래 걸렸던 거 같습니다.

// 4. 성공한 풀이
function solution(n) {
  let sum = (a = 0);
  let b = 1;
  for (let i = 2; i <= n; i++) {
    sum = (a + b) % 1234567;
    a = b;
    b = sum;
  }
  return sum;
}

// 5. 회고
// 이 문제를 풀 때 왜 NaN이 나오는지 제대로 몰랐습니다.
// NaN 값이 나온 이유를 찾기 위해 공부를 하니 자바스크립트에 대해 조금 더 알게 되었습니다.
// 이 문제를 풀면서 언제 계산을 할 때 리턴 값이 크게 달라진다는 것을 알게 되었습니다.
// 또 알고리즘 문제를 푸는데 CS 지식도 중요하다는 것을 알게 되었습니다.
// 앞으로도 CS 지식을 쌓는데 노력을 해야겠습니다.
