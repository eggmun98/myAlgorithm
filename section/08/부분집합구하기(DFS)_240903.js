/* 문제와 이해
부분 집합을 구해야 한다.
공집합은 제외한다.
 */

/* 계획
이진 트리와 재귀 함수를 이용해서 푼다.
나는 이진 트리에서 왼쪽은 부분집합 변수에 담고 오른쪽은 부분집합 변수에 안 담는다
재귀 함수는 종료 조건을 모르면 if와 else 문을 일단 적는다.
if의 조건식에 index가 n + 1이면 리턴 시키는데.
공집합이 아닐 경우 부분집합 변수를 출력한다.
*/

/* 풀이1
 */
function solution(n) {
  const subset = [];

  const dfs = (index) => {
    if (index === n + 1) {
      if (subset.length > 0) {
        console.log(subset.join(""));
      }
      return;
    } else {
      subset.push(index);
      dfs(index + 1);

      subset.pop();
      dfs(index + 1);
    }
  };

  dfs(1);
}

solution(3);

/* 회고
이번 문제는 진짜 어려웠다.
이 문제는 이진 트리로 푸는 게 쉽다고 하였는데, 아무리 생각을 해도 푸는 방법이 생각이 안 났다.
그래서 이진트리 기본 문제를 전위 순회, 중위 순회, 후위 순회 방식으로 여러 번 풀어보니
어떻게 하면 부분집합을 출력할 수 있을지 생각이 났다.
그래서 생각을 코드로 바꿔서 풀어보았다.
이렇게 응용문제를 풀려면 기초부터 잘해야 되는 것을 깨닫게 되었고,
앞으로도 기초를 중요시하겠다.
 */
